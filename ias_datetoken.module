<?php

/**
 * Provide information about our custom placeholder/token.
 *
 * @see httx://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_token_info/7
 * @see httx://api.lullabot.com/token_example_token_info/7
 * @return array
 *   An associative array of available tokens and token types.
 */
function ias_datetoken_token_info() {
  $info = array();
  // Define a new token type.
  $info['types']['ias_custom_tokens'] = array(
    'name' => t('IAS custom tokens'),
    'description' => t('A token type for my custom tokens.'),
  );
  // Define any new tokens.
  $info['tokens']['ias_custom_tokens']['current_year'] = array(
    'name' => t('Current Year'),
    'description' => t('Inser current Year (@demo_year)', array('@demo_year'=>date('Y'))),
  );
  $info['tokens']['ias_custom_tokens']['next_year'] = array(
    'name' => t('Next Year'),
    'description' => t('Insert next Year (@demo_next_year)', array('@demo_next_year' => date('Y', strtotime('+1 year')))),
  );
  return $info;
}

/**
 * Provide replacement values for placeholder tokens.
 *
 * @see httx://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_tokens/7
 * @see httx://api.lullabot.com/token_example_tokens/7
 * @param string $type
 *   The machine-readable name of the type (group) of token being replaced, such
 *   as 'node', 'user', or another type defined by a hook_token_info()
 *   implementation.
 * @param array $tokens
 *   An array of tokens to be replaced. The keys are the machine-readable token
 *   names, and the values are the raw [type:token] strings that appeared in the
 *   original text.
 * @param array $data (optional)
 *   An associative array of data objects to be used when generating replacement
 *   values, as supplied in the $data parameter to token_replace().
 * @param array $options (optional)
 *   An associative array of options for token replacement; see token_replace()
 *   for possible values.
 * @return array
 *   An associative array of replacement values, keyed by the raw [type:token]
 *   strings from the original text.
 */

/**
 * Implements hook_tokens(). This hook will operate the token and replace it with it's value.
 */
function ias_datetoken_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);
  if ($type == 'ias_custom_tokens') {
    // Loop through the available tokens.
    foreach ($tokens as $name => $original) {
      // Find our custom tokens by name.
      switch ($name) {
        case 'current_year':
          // Work out the value of our token.
          $value = date('Y');
          // Give our token it's value!
          $replacements[$original] = $value;
          break;
        case 'next_year':
          // Work out the value of our token.
          $value = date('Y', strtotime('+1 year'));
          // Give our token it's value!
          $replacements[$original] = $value;
          break;
      }
    }
  }
  return $replacements;
}
